group 'org.platypus.sample'
version '1.0-SNAPSHOT'

apply plugin: GradlePlatypusPluginBuilder

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    compile project(':impl:module')
    compile project(':impl:models')
    compile project(':builder:core')
    compile project(':builder:plugin:jpa-generator')
    compile project(':builder:plugin:display-tree-module')
    compile project(':module:base')
}

platypus {
    moduleVersion "1"
    depends = ['base', 'stock']
    conf {
        display_tree_module {
            enable = false
            opt = [output: "TXT"]
        }
    }
}

class GradlePlatypusPluginBuilder implements Plugin<Project> {
    void apply(Project project) {
        project.configurations {
            platypus
        }
        project.extensions.create("platypus", PlatypusExtension, project)
        project.platypus.extensions.conf = project.container(PlatypusPluginExtensionContainer)
        project.getPluginManager().apply(ApplicationPlugin.class)
        project.sourceCompatibility = 1.8
        project.mainClassName = "org.platypus.builder.core.PlatypusBuilder"

        project.sourceSets {
            platypusgenerated {
                java {
                    srcDir 'src/main/platypus/generated'
                }
            }
        }
        project.run {
            doFirst {
                args project.platypus.getArgs()
            }
        }
    }
}

class PlatypusExtension {
    String moduleVersion
    String[] depends
    String projectDir
    String modulename
    String moduleQuickDesc
    String baseGeneratedPackage

    File shortDesc
    File longDesc

    String[] args_run

    PlatypusExtension(Project project) {
        projectDir = project.projectDir
        modulename = project.name
        moduleVersion = project.version
        baseGeneratedPackage = project.group.toString() + "." + project.name
        shortDesc = project.file('src/main/ressources/' + baseGeneratedPackage + '/short-desc.adoc')
        longDesc = project.file('src/main/ressources/' + baseGeneratedPackage + '/long-desc.adoc')
    }

    String[] getArgs(){
        return ["--directory=${projectDir}",
                "--modulename=${modulename}",
                "--plugins=${conf}",
                "--defaultpkg=${baseGeneratedPackage}",
                "--moduleVersion=${moduleVersion}",
                "--depends=${depends}",
                "--moduleQuickDesc=${moduleQuickDesc}",
                "--shortDesc=${shortDesc}",
                "--longDesc=${longDesc}"]
    }
}

class PlatypusPluginExtensionContainer {
    final String name
    boolean enable = true
    Map<String, String> opt = new HashMap<>()


    PlatypusPluginExtensionContainer(String name) {
        this.name = name
    }

    @Override
    public String toString() {
        return "$name(enable::$enable - opt::$opt)"
    }
}

task generateQueryDSL(type: JavaExec, group: 'build', description: 'Generates the QueryDSL query types') {
    println "BLABLA"
//    source = sourceSets.main.java
//    classpath = configurations.compile + configurations.platypus
//    options.compilerArgs = [
//            "-proc:only",
//            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
//    ]
//    destinationDir = sourceSets.platypusgenerated.java.srcDirs.iterator().next()
}

//compileJava {
//    dependsOn generateQueryDSL
//    dependsOn run
//    source platypusgenerated.destinationDir
//}
//
//compileGeneratedJava {
//    dependsOn generateQueryDSL
//    dependsOn run
//    options.warnings = false
//    classpath += sourceSets.main.runtimeClasspath
//}
//
//clean {
//    delete sourceSets.platypusgenerated.java.srcDirs
//}
//
//idea {
//    module {
//        sourceDirs += file('src/main/generated')
//    }
//}



