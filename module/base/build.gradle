import java.nio.file.Paths

group 'org.platypus.erp.module'
version '1.0-SNAPSHOT'

apply plugin: 'org.platypus.gradle-plugin'
apply plugin: 'war'

repositories {
    mavenCentral()
}
buildscript {
    repositories {
        maven {
            url uri('../../repo')
        }
    }
    dependencies {
        classpath 'org.platypus:gradle-plugin:1.0-SNAPSHOT'
    }
}
configurations {
    modelsCompile.extendsFrom platypusCompile
    generatedCompile.extendsFrom platypusCompile
    mainCompile.extendsFrom platypusCompile
    mainCompile.extendsFrom generatedCompile
}
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile project(':erp')
    modelsCompile project(':erp')
    generatedCompile project(':erp')

    generatedCompile 'javax.validation:validation-api:1.1.0.Final'
    generatedCompile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'

    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
}

jar {
    from sourceSets.models.output
    from sourceSets.main.output
    from sourceSets.generated.output
    dependsOn modelsClasses
    dependsOn generatedClasses
}

compileJava {
    source += sourceSets.models.java
    source += sourceSets.generated.java
    source += sourceSets.main.java
}

platypus {
    moduleQuickDesc "Sample Module with all platypus and community depends"
    moduleVersion "1"
    depends = []
    conf {
        display_tree_module {
            enable = false
            opt = [output: "TXT"]
        }
    }
}
task platypus_views(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.platypus.builder.core.views.ViewsFinder'
    // arguments to pass to the application
    args = ["${sourceSets.main.resources.srcDirs}", "${project.group}", "${project.name}", "${project.projectDir}"]
}

clean {
    delete sourceSets.generated.java.srcDirs
    delete new File(sourceSets.main.java.srcDirs[0], project.name)
    delete Paths.get(sourceSets.main.resources.srcDirs[0].path, "META-INF", "services").toFile()
}

